const { sequelize } = require('../config/db');
const { Recording, Catalog, Store, StoreInventory, Order } = require('../models');

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
const { recordings, catalog, stores, orders } = require('../data');

const importData = async () => {
  try {
    console.log('üîÑ –ù–∞—á–∞–ª–æ –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö...');
    
    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö (—Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü)
    await sequelize.sync({ force: true }); // force: true —É–¥–∞–ª–∏—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã');
    
    // –ò–º–ø–æ—Ä—Ç –∑–∞–ø–∏—Å–µ–π
    const createdRecordings = await Recording.bulkCreate(
      recordings.map(r => ({
        title: r.title,
        genre: r.genre,
        subgenre: r.subgenre || '',
        artist: r.artist,
        releaseYear: r.releaseYear,
        publisher: r.publisher,
        mediaType: r.mediaType,
        imageUrl: r.imageUrl || 'default.jpg'
      }))
    );
    console.log(`‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${createdRecordings.length} –∑–∞–ø–∏—Å–µ–π`);
    
    // –°–æ–∑–¥–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞—Ä—ã—Ö –∏ –Ω–æ–≤—ã—Ö ID
    const recordingIdMap = {};
    createdRecordings.forEach((record, index) => {
      recordingIdMap[recordings[index].id] = record.id;
    });
    
    // –ò–º–ø–æ—Ä—Ç –∫–∞—Ç–∞–ª–æ–≥–∞
    const catalogItems = await Catalog.bulkCreate(
      catalog.map(c => ({
        recordingId: recordingIdMap[c.recordingId],
        retailPrice: c.retailPrice,
        mediaType: c.mediaType
      }))
    );
    console.log(`‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${catalogItems.length} –∑–∞–ø–∏—Å–µ–π –∫–∞—Ç–∞–ª–æ–≥–∞`);
    
    // –ò–º–ø–æ—Ä—Ç –º–∞–≥–∞–∑–∏–Ω–æ–≤
    const createdStores = await Store.bulkCreate(
      stores.map(s => ({
        name: s.name,
        address: s.address,
        phone: s.phone
      }))
    );
    console.log(`‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${createdStores.length} –º–∞–≥–∞–∑–∏–Ω–æ–≤`);
    
    // –°–æ–∑–¥–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞—Ä—ã—Ö –∏ –Ω–æ–≤—ã—Ö ID –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–æ–≤
    const storeIdMap = {};
    createdStores.forEach((store, index) => {
      storeIdMap[stores[index].id] = store.id;
    });
    
    // –ò–º–ø–æ—Ä—Ç –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –º–∞–≥–∞–∑–∏–Ω–æ–≤
    const inventoryItems = [];
    stores.forEach(store => {
      store.inventory.forEach(item => {
        inventoryItems.push({
          storeId: storeIdMap[store.id],
          recordingId: recordingIdMap[item.recordingId],
          wholesalePrice: item.wholesalePrice,
          salesCount: item.salesCount,
          inStock: item.inStock
        });
      });
    });
    
    await StoreInventory.bulkCreate(inventoryItems);
    console.log(`‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${inventoryItems.length} –µ–¥–∏–Ω–∏—Ü –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è`);
    
    // –ò–º–ø–æ—Ä—Ç –∑–∞–∫–∞–∑–æ–≤
    const createdOrders = await Order.bulkCreate(
      orders.map(o => ({
        storeId: storeIdMap[o.storeId],
        recordingId: recordingIdMap[o.recordingId],
        quantity: o.quantity,
        orderDate: new Date(o.orderDate),
        status: o.status
      }))
    );
    console.log(`‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${createdOrders.length} –∑–∞–∫–∞–∑–æ–≤`);
    
    console.log('‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö:', error);
  }
};

module.exports = importData;